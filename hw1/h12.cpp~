#include <iostream>
#include <string>

#include <cstdlib>
#include <ctime>
#include <iomanip>

#include <vector>

using namespace std;

class Card
{
	public:
		Card()
		{

		}

		Card(string cFace, string cSuit)
		{
			face = cFace;
			suit = cSuit;
		}
		string print() const
		{
			return(face + " of " + suit);
		}
		string getFace() const
		{
			return face;	
		}
		string getSuit() const
		{
			return suit;
		}

	private:
		string face;
		string suit;
};

const int DECK_SIZE = 52;
class Deck
{
	public:
		void printDeck() const
		{
			cout << left;
			for(int i = 0; i < DECK_SIZE; ++i)
			{
				cout << setw(19) << deck[i].print();
				if((i + 1) % 4 == 0)
					cout << endl;
			}
		}

		Deck()
		{
			string FACES[] = { "A", "K", "Q", "J",
					   "10", "9", "8", "7",
					   "6", "5", "4", "3",
					   "2"};
			string SUITS[] = {" Clubs  ", " Spades ",
					  "Diamonds", " Hearts "};
			deck = new Card[DECK_SIZE];
			currCard = 0;
			for(int i = 0; i < DECK_SIZE; ++i)
				deck[i] = Card(FACES[i % 13], SUITS[i / 13]);
		}
		~Deck()
		{




		}
		void shuffle()
		{
			currCard = 0;
			for(int i = 0; i < DECK_SIZE; ++i)
			{
				int second = (rand() + time(0)) % DECK_SIZE;
				Card temp = deck[i];
				deck[i] = deck[second];
				deck[second] = temp;
			}
		}

		Card dealCard()
		{
			if(currCard > DECK_SIZE)
				shuffle();
			if(currCard < DECK_SIZE)
				return deck[currCard++];
			return deck[0];
		}
	private:
		Card *deck;
		int currCard;	
};

int faceToNum (string a)
{
	if (a == "A")
	{
		return 14;
	}
	else if (a == "K")
	{
		return 13;
	}
	else if (a == "Q")
	{
		return 12;
	}
	else if (a == "J")
	{
		return 11;
	}
	else if (a == "10")
	{
		return 10;
	}
	else
	{
		//return atoi(a);
	}
}
void displayCard(Card p1, Card p2)
{
	// title of game
	cout << setfill('=') << setw(25) << ' ' <<  endl;
	cout << "= The card game: \"WAR\" =" << endl;
	cout << setfill('=') << setw(25) << ' ' << endl;
	
	// p1 and p2 cards
	cout << setfill(' ') << setw(14) << "Your Card";
	cout << setfill(' ') << setw(35) << "Opponent's Card" << endl;
	cout << setfill('-') << setw(21) << ' ';
	cout << setfill(' ') <<  setw(12) << ' ' << setfill('-') << setw(21) << ' ' << endl;
	cout << '|' << p1.getFace() << setfill(' ') << setw(18) << '|';
	cout << setw(14) << '|' << p2.getFace() << setfill(' ') << setw(18) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(4) << ' ' <<  p1.getSuit() << setw(7) << '|';
	cout << setw(14) << '|' << setw(4) << ' ' << p2.getSuit() << setw(7) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(19) << '|' << setw(14) << '|' << setw(19) << '|' << endl;
	cout << '|' << setw(18) << p1.getFace() << '|';
	cout << setw(14) << '|' << setfill(' ') << setw(18) << p2.getFace() << '|' << endl;
	cout << setfill('-') << setw(21) << ' ';
	cout << setfill(' ') <<  setw(12) << ' ' << setfill('-') << setw(21) << ' ' << endl;
}
void dealCards(Deck &d, vector<Card> &a, vector<Card> &b)
{
  d.shuffle();
  Card currCard;
  for(int i = 0; i < DECK_SIZE; ++i)
    {
      currCard = d.dealCard();
      if(i % 2 == 0)
	a.push_back(currCard);
      else
	b.push_back(currCard);
    }
}
int main()
{
	Deck deck;
	Card currCard;
	vector<Card> p1, p2;
	int p1Score = 0;
	int ties = 0;
	int numBattles = 0;
	bool playGame = true;

	dealCards(deck, p1, p2);
	
	while(playGame == true)
	{
		playGame = false;

		if (p1.size() == 0)
		{
			p1.empty(p1.begin(), p1.end());
			p2.empty(p2.begin(), p2.end());
			dealCards(deck, p1, p2);
		}
		displayCard(p1.back(), p2.back());
		int p1Face = faceToNum(p1.back().getFace());
		int p2Face = faceToNum(p2.back().getFace());

		if(p1Face == p2Face) 	
		{
			// war
			ties++;
			numBattles++;
			
		}
		else if (p1Face < p2Face)
		{
			// p2 wins
			numBattles++;
		}
		else
		{
			// p1 wins
			p1Score++;
			numBattles++;
		}
		// game stats
		cout << setfill(' ') << setw(15) << "Total Battles: "<< setw(10) << numBattles << endl;
		cout << "You Won: " << setw(15) << p1Score << endl;
		cout << "Opponent won: " << setw(11) << numBattles - p1Score - ties << endl;
		cout << "Ties: " << setw(18) << ties << endl;
		p1.pop_back();
		p2.pop_back();

		// request new game
		bool inputLoop = true;
		  while (inputLoop == true)
		    {
		      cout << "Do you want to play another game? (y,n) " << endl;
		      char temp;
		      cin >> temp;
		      if (temp == 'y' || temp = 'Y')
			{
			  playGame = true;
			  inputLoop = false;
			}
		      else if (temp == 'n' || temp == 'N')
			{
			  playGame = false;
			  inputLoop = false;
			}
		      else
			{
			  inputLoop = true;
			}
		    }
	}

	return 0;
}
